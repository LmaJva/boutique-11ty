<label for="destination" id="destination-label" class="display-none">Destination :</label>
<select id="destination" name="destination">
  {% for zone, data in shipping.grille_tarifs %}
    {% for country in data.pays[page.lang] %}
      <option value="{{ zone }}">
        {{ country }}
      </option>
    {% endfor %}
  {% endfor %}
</select>

<p>
  Frais de transport (colissimo la Poste) : 
  <span id="shipping-cost">--</span> €
</p>

<script>
  document.addEventListener('DOMContentLoaded', function () {
  const destinationSelect = document.getElementById('destination');
  const shippingCostElement = document.getElementById('shipping-cost');

  const items = [
    { type: 'colis_base', weight: 250, points: 11 },
    { type: 'tube', weight: 100, points: 2 },
    { type: 'sans_envoi', weight: 0, points: 0 },
  ];

  const shippingData = {{ shipping | dump | safe }};

  /**
   * Calcul le nombre de colis nécessaires pour un objet donné.
   */
  function calculateColisCount(item, colisData) {
    if (!colisData) return 0;
    const colisCapacity = colisData.capacite_points;
    return item.points <= colisCapacity ? 1 : Math.ceil(item.points / colisCapacity);
  }

  /**
   * Calcule le poids total pour un objet donné.
   */
  function calculateItemWeight(item, numberOfColis, colisData) {
    return item.weight + (numberOfColis * colisData.poids_emballage);
  }

  /**
   * Calcule les frais pour un type de colis dans une zone.
   */
  function calculateCostForColis(totalWeight, selectedZone) {
    const tarifs = shippingData.grille_tarifs[selectedZone].tarifs;
    const tarif = tarifs.find(t => totalWeight <= t.poids_max);
    return tarif ? tarif.tarif : 0;
  }

  /**
   * Calcule les frais de transport pour la zone sélectionnée.
   */
  function calculateShippingCost(selectedZone) {
    if (!selectedZone || !shippingData.grille_tarifs[selectedZone]) return 0;

    let totalCost = 0;

    items.forEach(item => {
      if (item.type === 'sans_envoi') return; // Ignorer les objets sans envoi

      const colisData = shippingData.types_colis[item.type];
      const numberOfColis = calculateColisCount(item, colisData);
      const totalWeight = calculateItemWeight(item, numberOfColis, colisData);

      console.log(`Type : ${item.type}, Points : ${item.points}, Colis : ${numberOfColis}, Poids : ${totalWeight}`);
      
      // Calcule le coût pour cet objet et l'ajoute au total
      const cost = calculateCostForColis(totalWeight, selectedZone);
      totalCost += cost;
    });

    return totalCost;
  }

  /**
   * Met à jour l'interface utilisateur avec les frais de transport calculés.
   */
  function updateShippingCost() {
    const selectedZone = destinationSelect.value;
    const shippingCost = calculateShippingCost(selectedZone);

    shippingCostElement.textContent = shippingCost.toFixed(2);
  }

  destinationSelect.addEventListener('change', updateShippingCost);
  updateShippingCost();
});


</script>
