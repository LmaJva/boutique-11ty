---
layout: _layouts/default.njk
eleventyComputed:
    title: '{{ i18n.cart_title[page.lang] | safe }}'
---

<h1 id="cart-title">{{ title }}</h1>

<section id="cart" class="" aria-labelledby="cart-title">
    <div id="cart-content" class="products-list"></div>
    <div id="cart-ticket" aria-live="polite">
        <h2 class="cart-ticket-title">{{ i18n.receipt[page.lang] }}</h2>
        <label for="destination" id="destination-label">{{ i18n.destination[page.lang] }}</label>
        <div class="select">
            <select id="destination" name="destination" aria-labelledby="destination-label" aria-required="true" role="combobox">
            {% for zone, data in shipping.grille_tarifs %}
                {% for country in data.pays[page.lang] %}
                <option value="{{ zone }}">
                    {{ country }}
                </option>
                {% endfor %}
            {% endfor %}
            </select>
        </div>

        <div class="cart-summary" aria-labelledby="subtotal-label" aria-describedby="subtotal-amount">
            <strong id="subtotal-label">{{ i18n.subtotal_amount[page.lang] }}</strong>
            <data id="subtotal-amount" class="price subtotal-amount" value="${productData.price}" itemprop="price">0.00</data>
            <meta itemprop="priceCurrency" content="EUR" />
        </div>
        <div class="cart-summary" aria-labelledby="shipping-label" aria-describedby="shipping-amount">
            <strong id="shipping-label">{{ i18n.shipping_amount[page.lang] }}</strong>
            <data id="shipping-amount" class="price shipping-amount" value="${productData.price}" itemprop="price">0.00</data>
            <meta itemprop="priceCurrency" content="EUR" />
        </div>
        <div class="cart-summary summary-total" aria-labelledby="total-label" aria-describedby="total-amount">
            <strong id="total-label">{{ i18n.total[page.lang] }}</strong>
            <data id="total-amount" class="price total-amount" value="${productData.price}" itemprop="price">0.00</data>
            <meta itemprop="priceCurrency" content="EUR" />
        </div>
        <button id="checkout-button"></button>
    </div>

  <!-- Message d'avertissement caché par défaut -->
  <div id="stripe-warning" style="display: none; background-color: #fff3cd; color: #856404; padding: 20px; margin: 20px 0; border: 1px solid #ffeeba; border-radius: 4px;">
    <p>Nous rencontrons des difficultés techniques pour finaliser votre paiement. Veuillez réessayer ou nous contacter si le problème persiste.</p>
  </div>
</section>

<section id="no-cart" class="display-none" role="alert">
    <p>{{ i18n.no_item[page.lang] }}</p>
    <a href="{{ '/' | customLocaleUrl(page.lang) | url }}" aria-label="{{ i18n.no_item_link[page.lang] }} - retour à l'accueil">
        ‹ {{ i18n.no_item_link[page.lang] }}
    </a>
</section>


<script src="https://js.stripe.com/v3/"></script>
<script>
document.getElementById('checkout-button').addEventListener('click', async () => {
  // Récupérer les données du panier depuis le localStorage ou une autre source
  const cartData = JSON.parse(localStorage.getItem('cart')) || [];

  // Vérifiez que le panier n'est pas vide
  if (cartData.length === 0) {
    alert('Votre panier est vide.');
    return;
  }

  try {
    // Envoyer les données du panier à la fonction serverless
    const response = await fetch('/.netlify/functions/create-checkout-session', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ cartItems: cartData }),
    });

    const { sessionId, error } = await response.json();

    if (error) {
      alert(`Erreur : ${error}`);
      return;
    }

    // Initialiser Stripe avec votre clé publique
    const stripe = Stripe('pk_test_51HEFz3GJpQWhfcWwXgkgoLbJ1GLgViXGqYfWSgBQwzudrYdsQiMhdVkGWHQvRPx3sTMLNsRXvB2B6pdF1GEpQ9Ka00kz6AoFmS');

    // Rediriger vers Stripe Checkout
    const { error: stripeError } = await stripe.redirectToCheckout({ sessionId });

    if (stripeError) {
      alert(stripeError.message);
    }
  } catch (err) {
    console.error('Erreur lors de la création de la session de paiement :', err);
    alert('Une erreur est survenue. Veuillez réessayer.');
  }
});
</script>
<script>
    const shippingData = {{ shipping | dump | safe }};
</script>
